@* @inject LayerZero.Tools.Web.Services.Bundles.BundleCollection _collection

@{
    var resources = _collection.AllResources();
}
 *@
<ul id="assets">
    <li><a href="/bundles/bulk-assest.min.js">bulk-assest.min.js</a></li>
    <li><a href="/bundles/bulk-assest.min.css">bulk-assest.min.css</a></li>
    @* @foreach (var item in resources)
    {
        <li><a href="/bundles/@(item)">/bundles/@item</a></li>
    } *@
    <!-- Add more asset links here -->
</ul>





<script>
    async function benchmarkAsset(url) {
      const startTime = performance.now();

      try {
        const response = await fetch(url, { cache: "no-store" }); // avoid cache

        const endTime = performance.now();
        const duration = (endTime - startTime).toFixed(2); // ms

        const size = response.headers.get("content-length");
        console.log(response.headers);
        const contentType = response.headers.get("content-type");


         // Manually get size
        const buffer = await response.arrayBuffer();
        const sizeBytes = buffer.byteLength;
        const sizeKB = (sizeBytes / 1024).toFixed(2) + " KB";

        console.log(`URL: ${url}`);
        console.log(`Type: ${contentType}`);
        console.log(`Load time: ${duration} ms`);
        console.log(`Size: ${sizeKB}`);
        console.log("---");

        return {
          url,
          duration: Number(duration),
          size: sizeKB,
          type: contentType
        };
      } catch (err) {
        console.warn(`Failed to load ${url}:`, err);
        return null;
      }
    }

    async function benchmarkAll() {
      const links = document.querySelectorAll("#assets a");

      for (const link of links) {
        const url = link.href;
        await benchmarkAsset(url);
      }
    }

    window.onload = benchmarkAll;
</script>